import re
from typing import Iterable


def check_text_template(text: str, keys: Iterable[str]):
    parentheses_count = check_parentheses_equality(text)
    word_matches = re.findall(r'{([^{}]+)}', text)

    if parentheses_count != len(word_matches):
        raise Exception('–í —Ç–µ–∫—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ñ–∏–≥—É—Ä–Ω—ã–µ '
                        '—Å–∫–æ–±–∫–∏ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω–∏—Ö.')

    for word in word_matches:
        if word in keys:
            continue
        raise Exception(f'–í –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞—Ö –Ω–µ –Ω–∞—à–ª–æ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ: {word}')

    return text


def check_parentheses_equality(text) -> int:
    par_matches = re.findall(r'[{|}]', text)
    left_par_matches = len(list(filter(lambda x: x == '{', par_matches)))
    right_par_matches = len(list(filter(lambda x: x == '}', par_matches)))
    if left_par_matches != right_par_matches:
        raise Exception('–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                        '–ª–µ–≤—ã—Ö –∏ –ø—Ä–∞–≤—ã—Ö —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫.')
    return left_par_matches


def main():
    test_text = '''{name}, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞:
    ‚åö {day_month} –≤ {start_time}
    üë© {master}
    –£—Å–ª—É–≥–∏:
    {services}
    —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é {record_link}'''

    list_keys = [
        'name',
        'day_month',
        'day_of_week',
        'start_time',
        'end_time',
        'master',
        'services',
    ]
    check_text_template(test_text, list_keys)


if __name__ == '__main__':
    main()
